#!/bin/sh
# postrm script for {{package_name}}
#
# see: dh_installdeb(1)


# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <overwriter>
#          <overwriter-version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

set -e

case "$1" in
    purge)
        rm -f /etc/default/{{package_install_name}}
        if [ -d /var/log/{{package_install_name}} ]; then
                rm -r /var/log/{{package_install_name}}
        fi
        if [ -d /var/run/{{package_install_name}} ]; then
                rm -r /var/run/{{package_install_name}}
        fi
        if [ -d /etc/{{package_install_name}} ]; then
                rm -r /etc/{{package_install_name}}
        fi
        if [ -e /etc/init.d/{{package_install_name}} ]; then
                rm  /etc/init.d/{{package_install_name}}
        fi
        # Remove User & Group, killing any process owned by them
        if getent passwd {{package_install_user}} >/dev/null; then
                pkill -u {{package_install_user}} || true
                deluser --quiet --system {{package_install_user}}
        fi
        if getent group {{package_install_group}} >/dev/null; then
                delgroup --quiet --system --only-if-empty {{package_install_group}} || true
        fi
    ;;

    remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
    ;;

    *)
        echo "postrm called with unknown argument \`$1\`" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
