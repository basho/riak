%%-*- mode: erlang -*-

%% @doc Where to emit the default log messages (typically at 'info'
%% severity):
%%     off: disabled
%%    file: the file specified by log.console.file
%% console: to standard output (seen when using `riak attach-direct`)
%%    both: log.console.file and standard out.
{mapping, "log.console", "lager.handlers", [
  {default, {{console_log_default}} },
  {datatype, {enum, [off, file, console, both]}}
]}.

%% @doc The severity level of the console log, default is 'info'.
{mapping, "log.console.level", "lager.handlers", [
  {default, info},
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency, none]}}
]}.

%% @doc When 'log.console' is set to 'file' or 'both', the file where
%% console messages will be logged.
{mapping, "log.console.file", "lager.handlers", [
  {default, "$(platform_log_dir)/console.log"},
  {datatype, file}
]}.

%% @doc The file where error messages will be logged.
{mapping, "log.error.file", "lager.handlers", [
  {default, "$(platform_log_dir)/error.log"},
  {datatype, file}
]}.

%% @doc When set to 'on', enables log output to syslog.
{mapping, "log.syslog", "lager.handlers", [
  {default, off},
  {datatype, flag}
]}.

%% @doc When set to 'on', enables log output to syslog.
{mapping, "log.syslog.ident", "lager.handlers", [
  {default, "riak"},
  hidden
]}.

%% @doc Syslog facility to log entries from Riak.
{mapping, "log.syslog.facility", "lager.handlers", [
  {default, daemon},
  {datatype, {enum,[kern, user, mail, daemon, auth, syslog,
                    lpr, news, uucp, clock, authpriv, ftp,
                    cron, local0, local1, local2, local3,
                    local4, local5, local6, local7]}},
  hidden
]}.

%% @doc The severity level at which to log entries to syslog, default is 'info'.
{mapping, "log.syslog.level", "lager.handlers", [
  {default, info},
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency, none]}},
  hidden
]}.

{translation,
 "lager.handlers",
 fun(Conf) ->
    SyslogHandler = case cuttlefish:conf_get("log.syslog", Conf) of
      true ->
        Ident = cuttlefish:conf_get("log.syslog.ident", Conf),
        Facility = cuttlefish:conf_get("log.syslog.facility", Conf),
        LogLevel = cuttlefish:conf_get("log.syslog.level", Conf),
        [{lager_syslog_backend, [Ident, Facility, LogLevel]}];
      _ -> []
    end,
    ErrorHandler = case cuttlefish:conf_get("log.error.file", Conf) of
      undefined -> [];
      ErrorFilename -> [{lager_file_backend, [{file, ErrorFilename},
                                              {level, error},
                                              {size, 10485760},
                                              {date, "$D0"},
                                              {count, 5}]}]
    end,

    ConsoleLogLevel = cuttlefish:conf_get("log.console.level", Conf),
    ConsoleLogFile = cuttlefish:conf_get("log.console.file", Conf),

    ConsoleHandler = {lager_console_backend, ConsoleLogLevel},
    ConsoleFileHandler = {lager_file_backend, [{file, ConsoleLogFile},
                                               {level, ConsoleLogLevel},
                                               {size, 10485760},
                                               {date, "$D0"},
                                               {count, 5}]},

    ConsoleHandlers = case cuttlefish:conf_get("log.console", Conf) of
      off -> [];
      file -> [ConsoleFileHandler];
      console -> [ConsoleHandler];
      both -> [ConsoleHandler, ConsoleFileHandler];
      _ -> []
    end,
    SyslogHandler ++ ConsoleHandlers ++ ErrorHandler
  end
}.


%% @doc Whether to enable Erlang's built-in error logger.
{mapping, "sasl", "sasl.sasl_error_logger", [
  {default, off},
  {datatype, flag},
  hidden
]}.

%% @doc Whether to enable the crash log.
{mapping, "log.crash", "lager.crash_log", [
  {default, on},
  {datatype, flag}
]}.

%% @doc If the crash log is enabled, the file where its messages will
%% be written.
{mapping, "log.crash.file", "lager.crash_log", [
  {default, "$(platform_log_dir)/crash.log"},
  {datatype, file}
]}.

{translation,
 "lager.crash_log",
 fun(Conf) ->
     case cuttlefish:conf_get("log.crash", Conf) of
         false -> undefined;
         _ ->
             cuttlefish:conf_get("log.crash.file", Conf, "{{platform_log_dir}}/crash.log")
     end
 end}.

%% @doc Maximum size in bytes of individual messages in the crash log
{mapping, "log.crash.maximum_message_size", "lager.crash_log_msg_size", [
  {default, "64KB"},
  {datatype, bytesize}
]}.

%% @doc Maximum size of the crash log in bytes, before it is rotated
{mapping, "log.crash.size", "lager.crash_log_size", [
  {default, "10MB"},
  {datatype, bytesize}
]}.

%% @doc The schedule on which to rotate the crash log.  For more
%% information see:
%% https://github.com/basho/lager/blob/master/README.md#internal-log-rotation
{mapping, "log.crash.rotation", "lager.crash_log_date", [
  {default, "$D0"}
]}.

%% @doc The number of rotated crash logs to keep. When set to
%% 'current', only the current open log file is kept.
{mapping, "log.crash.rotation.keep", "lager.crash_log_count", [
  {default, 5},
  {datatype, [integer, {atom, current}]},
  {validators, ["rotation_count"]}
]}.

{validator,
 "rotation_count",
 "must be 'current' or a positive integer",
 fun(current) -> true;
    (Int) when is_integer(Int) andalso Int >= 0 -> true;
    (_) -> false
 end}.

{translation,
 "lager.crash_log_count",
 fun(Conf) ->
    case cuttlefish:conf_get("log.crash.rotation.keep", Conf) of
       current -> 0;
       Int -> Int
    end
 end}.

%% @doc Whether to redirect error_logger messages into lager -
%% defaults to true
{mapping, "log.error.redirect", "lager.error_logger_redirect", [
  {default, on},
  {datatype, flag},
  hidden
]}.

%% @doc Maximum number of error_logger messages to handle in a second
{mapping, "log.error.messages_per_second", "lager.error_logger_hwm", [
  {default, 100},
  {datatype, integer},
  hidden
]}.


%% @doc Cookie for distributed node communication.  All nodes in the
%% same cluster should use the same cookie or they will not be able to
%% communicate.
{mapping, "distributed_cookie", "vm_args.-setcookie", [
  {default, "riak"}
]}.


%% override zdbbl from 1mb to 32mb
{mapping, "erlang.distribution_buffer_size", "vm_args.+zdbbl", [
  {default, "32MB"},
  merge
]}.

%% VM scheduler collapse, part 1 of 2
{mapping, "erlang.schedulers.force_wakeup_interval", "vm_args.+sfwi", [
  {default, 500},
  {datatype, integer},
  merge
]}.

%% VM scheduler collapse, part 2 of 2
{mapping, "erlang.schedulers.compaction_of_load", "vm_args.+scl", [
  {default, "false"},
  merge
]}.

%% VM emulator ignore break signal (prevent ^C / ^Gq)
{mapping, "erlang.vm.ignore_break_signal", "vm_args.+Bi", [
  {default, "true"},
  merge
]}.

%% @doc The VM single block carrier threshold (KB) for process heap
{mapping, "erlang.eheap_memory.sbct", "vm_args.+MHsbct", [
    {commented, 512},
    {datatype, integer},
    merge
]}.

%% @doc The VM single block carrier threshold (KB) for binary heap
{mapping, "erlang.binary_memory.sbct", "vm_args.+MBsbct", [
    {commented, 512},
    {datatype, integer},
    merge
]}.

%% @doc The VM multi block carrier large size for process heap
{mapping, "erlang.eheap_memory.lmbcs", "vm_args.+MHlmbcs", [
    {commented, 5120},
    {datatype, integer},
    merge
]}.

%% @doc The VM multi block carrier large size for binary heap
{mapping, "erlang.binary_memory.lmbcs", "vm_args.+MBlmbcs", [
    {commented, 5120},
    {datatype, integer},
    merge
]}.

%% @doc The VM multi block carrier small size for process heap
{mapping, "erlang.eheap_memory.smbcs", "vm_args.+MHsmbcs", [
    {commented, 256},
    {datatype, integer},
    merge
]}.

%% @doc The VM multi block carrier small size for binary heap
{mapping, "erlang.binary_memory.smbcs", "vm_args.+MBsmbcs", [
    {commented, 256},
    {datatype, integer},
    merge
]}.

%% @doc Force move on realloc for process heap
{mapping, "erlang.eheap_memory.ramv", "vm_args.+MHramv", [
    {commented, "false"},
    {datatype, {enum, [true, false]}},
    merge
]}.

%% @doc Force move on realloc for binary heap
{mapping, "erlang.binary_memory.ramv", "vm_args.+MBramv", [
    {commented, "false"},
    {datatype, {enum, [true, false]}},
    merge
]}.

%% @doc The abandonded carrier utilisation limit for process multiblock
%% carriers.
%% Set to de to use the default value for the OTP version.  Set to 0 to revert
%% to pre OTP 17 behaviour of no acul
{mapping, "erlang.eheap_memory.acul", "vm_args.+MHacul", [
  {commented, "de"},
  {datatype, [integer, {enum, [de]}]},
  {validators, ["acul_validate"]},
  merge
]}.

%% @doc The abandonded carrier utilisation limit for binary multiblock
%% carriers.
%% Set to de to use the default value for the OTP version.  Set to 0 to revert
%% to pre OTP 17 behaviour of no acul
{mapping, "erlang.binary_memory.acul", "vm_args.+MBacul", [
  {commented, "de"},
  {datatype, [integer, {enum, [de]}]},
  {validators, ["acul_validate"]},
  merge
]}.

{validator,
 "acul_validate",
 "must be 'de' or an integer in range [0, 100]",
 fun(de) -> true;
    (Int) when is_integer(Int) andalso Int >= 0 andalso Int =< 100 -> true;
    (_) -> false
 end}.

 %% @doc Set allocation strategy for binary multiblock carriers.  Default is
%% not predictable - do not rely on aoffcbf being the default.  For more info
%% see:
%% https://github.com/erlang/otp/blob/master/erts/emulator/internal_doc/CarrierMigration.md
{mapping, "erlang.binary_memory.as", "vm_args.+MBas", [
    {commented, "aoffcbf"},
    {datatype, {enum, [bf, aobf, aoff, aoffcbf, aoffcaobf, ageffcaoff, ageffcbf, ageffcaobf, gf]}},
    merge
]}.

%% @doc Set allocation strategy for process multiblock carriers.  Default is
%% not predictable - do not rely on aoffcbf being the default.  For more info
%% see:
%% https://github.com/erlang/otp/blob/master/erts/emulator/internal_doc/CarrierMigration.md
{mapping, "erlang.eheap_memory.as", "vm_args.+MHas", [
    {commented, "aoffcbf"},
    {datatype, {enum, [bf, aobf, aoff, aoffcbf, aoffcaobf, ageffcaoff, ageffcbf, ageffcaobf, gf]}},
    merge
]}.

%% @doc Set scheduler binding.  This is either unbound (default - u) or can be
%% set to whatever the default binding condition is, in the deployed release of
%% OTP (db).
%% For more info see: https://www.erlang.org/doc/man/erl.html#+sbt
%% Note that if non-Riak work is activated on the same node - e.g. as part
%% of batch operational jobs, or monitoring - allowing schedulers to be bound
%% can result in significant and unpredictable negative outcomes.  There may be
%% other ways of achieving similar performance improvements - e.g. by
%% right-sizing scheduler counts - that are lower risk than scheduler binding.
%% If a CPU topology cannot be determined, the binding will default to unbound
%% even when a binding is configured.  To confirm binding, use `remote_console`
%% and view:
%% `erlang:system_info(scheduler_bindings).`
{mapping, "erlang.schedulers_binding", "vm_args.+stbt", [
    {commented, "u"},
    {datatype, {enum, [u, db]}},
    merge
]}.

%% @doc Busy wait of schedulers
%% Sets scheduler busy wait threshold. Defaults to medium. The threshold
%% determines how long schedulers are to busy wait when running out of work
%% before going to sleep.
{mapping, "erlang.schedulers_busywait", "vm_args.+sbwt", [
    {commented, "none"},
    {datatype, {enum, [none, very_short, short, medium, long, very_long]}},
    merge
]}.

%% @doc Set the Percentage of Schedulers to be online
%% For every vCPU in the system, what percentage should have a scheduler, and
%% what percentage of those schedulers should be online by default.
%% Do not set unless guided by perfomance tests for the specific setup and
%% workload.
{mapping, "erlang.schedulers_online_percentage", "vm_args.+SP",[
    {commented, "100:75"},
    {validators, ["scheduler_percentage"]},
    merge
]}.

%% @doc Set the Percentage of Dirty CPU Schedulers to be online
%% When using the leveled backend a relatievly low number of dirty schedulers
%% (e.g. 25%) are likely to be required due to the low proportion of NIFs in
%% use.
%% The percentages cannot exceed those of the schedulers_online_percentage
%% which will default to 100% of CPU.
%% Do not set unless guided by perfomance tests for the specific setup and
%% workload.
{mapping, "erlang.schedulers_dirtycpu_online_percentage", "vm_args.+SDPcpu",[
    {commented, "50:25"},
    {validators, ["scheduler_percentage"]},
    merge
]}.

%% @doc Set the absolute limit of Dirty IO Schedulers to be online
%% When using the leveled backend a relatievly high number of dirty schedulers
%% may be required relative to the CPU count, depending on the concurrent disk
%% throughput possible.
%% Unlike the scheduler percentages, this is set as an abolute number between
%% 1 and 1024 (default is 10).
%% Do not set unless guided by perfomance tests for the specific setup and
%% workload.
{mapping, "erlang.schedulers_dirtyio_online", "vm_args.+SDio",[
    {commented, 10},
    {datatype, integer},
    {validators, ["scheduler_absolute"]},
    merge
]}.

{validator,
 "scheduler_percentage",
 "must be A:B when B =< A and both A and B 1 < x =< 100",
 fun(PercPerc) ->
    case string:tokens(PercPerc, ":") of
        [A, B] ->
            AV = list_to_integer(A),
            BV = list_to_integer(B),
            AV =< 100 andalso AV > 0 andalso BV =< 100 andalso BV > 0;
        _ ->
            false
    end
 end}.

{validator,
 "scheduler_absolute",
 "must be 1 to 1024",
 fun(Value) ->
    is_integer(Value) andalso Value =< 1024 andalso Value >= 1
 end}.

{{#devrel}}
%% Because of the 'merge' keyword in the proplist below, the docs and datatype
%% are pulled from the leveldb schema.
{mapping, "leveldb.limited_developer_mem", "eleveldb.limited_developer_mem", [
  {default, on},
  {level, basic},
  merge
]}.

%% @doc erlang vm shutdown_time is useful when running a riak_test devrel
{mapping, "erlang.shutdown_time", "vm_args.-shutdown_time", [
  {default, "10s"},
  {datatype, {duration, ms}}
]}.
{{/devrel}}
