%%-*- mode: erlang -*-

%% @doc The severity level of the console log, default is 'info'.
{mapping, "logger.level", "kernel.logger_level", [
  {default, {{logger_level}} },
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency, none]}}
]}.

%% @doc Format string for the messages emitted to default log. The string is passed into
%% the handler as a logger_formatter template, the format is a list containing strings
%% and atoms. The atoms denote the keys for retrieving metadata from the logger events.
%% More information on default metadata can be found here (https://www.erlang.org/doc/man/logger_formatter.html#type-template).
{mapping, "logger.format", "kernel.logger", [
  {default, "[time,\" [\",level,\"] \",pid,\"@\",mfa,\":\",line,\" \",msg,\"\\n\"]."}
]}.

%% @doc Filename to use for log files.
{mapping, "logger.file", "kernel.logger", [
  {default, "$(platform_log_dir)/console.log"},
  {datatype, file}
]}.

%% @doc With log rotation enabled, this decides the maximum number of log 
%% files to store.
{mapping, "logger.max_files", "kernel.logger", [
  {default, 10},
  {datatype, integer}
]}.

%% @doc The maximum size of a single log file. Total size used for log files will 
%% be max_file_size * max_files.
{mapping, "logger.max_file_size", "kernel.logger", [
  {default, "1MB"},
  {datatype, bytesize}
]}.

%% @doc Determines if messages should emit to syslog.
{mapping, "syslogger.enabled", "kernel.logger", [
  {default, off},
  {datatype, {flag, on, off}}
]}.

%% @doc The severity level of the syslog log, default is 'notice'.
{mapping, "syslogger.level", "kernel.logger", [
  {default, notice},
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency, none]}}
]}.

%% @doc The syslog facility to use, default is 'user'.
{mapping, "syslogger.facility", "kernel.logger", [
  {default, user},
  {datatype, {enum, [user, local0]}}
]}.

%% @doc Format string for the messages emitted to syslog. The string is passed into
%% the handler as a logger_formatter template, the format is a list containing strings
%% and atoms. The atoms denote the keys for retrieving metadata from the logger events.
%% More information on default metadata can be found here (https://www.erlang.org/doc/man/logger_formatter.html#type-template).
{mapping, "syslogger.format", "kernel.logger", [
  {default, "[\"severity=\",level,\" text=\",msg]."},
  {datatype, string}
]}.

%% @doc Default opts that need setting for the syslogger application to ensure that
%% the PID is printed with log messages, along with the correct process identifier.
{translation, "syslogger",
    fun(_Conf) ->
        [{log_opts, [pid]}, {ident, "riak"}]
    end
}.

{translation,
 "kernel.logger",
 fun(Conf) ->
    LogFile = cuttlefish:conf_get("logger.file", Conf),
    MaxNumBytes = cuttlefish:conf_get("logger.max_file_size", Conf),
    MaxNumFiles = cuttlefish:conf_get("logger.max_files", Conf),

    DefaultFormatStr = cuttlefish:conf_get("logger.format", Conf),
    DefaultFormatTerm =
        case erl_scan:string(DefaultFormatStr) of
            {ok, DefaultTokens, _} ->
                case erl_parse:parse_term(DefaultTokens) of
                    {ok, DefaultTerm} ->
                        DefaultTerm;
                    {error, {_, _, DefaultError}} ->
                        cuttlefish:error(foo)
                end;
            {error, {_, _, DefaultScanError}} ->
                cuttlefish:error(foo)
        end,
    ConfigMap0 = #{config => #{file => LogFile,
                              max_no_bytes => MaxNumBytes,
                              max_no_files => MaxNumFiles},
                  formatter => {logger_formatter, 
                                    #{template => DefaultFormatTerm}
                               }
                 },

    DefaultLog = [{handler, default, logger_std_h, ConfigMap0}],

    SyslogLog =
        case cuttlefish:conf_get("syslogger.enabled", Conf) of
            true ->
                SyslogLevel = cuttlefish:conf_get("syslogger.level", Conf),
                SyslogFacility = cuttlefish:conf_get("syslogger.facility", Conf),
                SyslogFormatStr = cuttlefish:conf_get("syslogger.format", Conf),
                SyslogFormatTerm =
                    case erl_scan:string(SyslogFormatStr) of
                        {ok, SyslogTokens, _} ->
                            case erl_parse:parse_term(SyslogTokens) of
                                {ok, SyslogTerm} ->
                                    SyslogTerm;
                                {error, {_, _, SyslogError}} ->
                                    cuttlefish:error(foo)
                            end;
                        {error, {_, _, SyslogScanError}} ->
                            cuttlefish:error(foo)
                    end,
                ConfigMap1 = #{level => SyslogLevel,
                               formatter => {logger_formatter, 
                                                #{template => SyslogFormatTerm,
                                                  single_line => true}}, facility => SyslogFacility},
                [{handler, syslog, syslogger, ConfigMap1}];
            false ->
                []
        end,
    DefaultLog ++ SyslogLog
  end
}.

%% @doc Cookie for distributed node communication.  All nodes in the
%% same cluster should use the same cookie or they will not be able to
%% communicate.
{mapping, "distributed_cookie", "vm_args.-setcookie", [
  {default, "riak"}
]}.


%% override zdbbl from 1mb to 32mb
{mapping, "erlang.distribution_buffer_size", "vm_args.+zdbbl", [
  {default, "32MB"},
  merge
]}.

%% @doc Riak changes the VM default wakeup interval in order to reduce the
%% risk of scheduler collapse, prior to the availability of Dirty NIFs in
%% later OTP versions. When using the leveled backend exclusively (either for
%% AAE or object storage) this change is likely unnecessary, and the VM default
%% of 0 can be used.
{mapping, "erlang.schedulers.force_wakeup_interval", "vm_args.+sfwi", [
  {default, 500},
  {datatype, integer},
  merge
]}.

%% @doc Riak changes the compaction_of_load default from true to false. This
%% is part of the strategy for preventing scheduler collapse in older VMs.
%% When using the leveled backend exclusively (either for AAE or object
%% storage), this change from the standard BEAM defaults is likely unnecessary
%% - and compaction_of_load can be re-enabled.
{mapping, "erlang.schedulers.compaction_of_load", "vm_args.+scl", [
  {default, "false"},
  merge
]}.

%% @doc Sets the number of threads in async thread pool, valid range
%% is 0-1024. If thread support is available, the default is 64.
%%
%% More information at: http://erlang.org/doc/man/erl.html
%%
%% Large async_thread pools are likely now unnecessary if exclusively using
%% the leveled backend due to dirty NIFs, and so can be set to a much smaller
%% value (potentially 1). 
{mapping, "erlang.async_threads", "vm_args.+A", [
  {default, 64},
  {datatype, integer},
  {validators, ["range:0-1024"]},
  merge
]}.

%% VM emulator ignore break signal (prevent ^C / ^Gq)
{mapping, "erlang.vm.ignore_break_signal", "vm_args.+Bi", [
  {default, "true"},
  merge
]}.

%% @doc The VM single block carrier threshold (KB) for process heap
{mapping, "erlang.eheap_memory.sbct", "vm_args.+MHsbct", [
    {commented, 512},
    {datatype, integer},
    merge
]}.

%% @doc The VM single block carrier threshold (KB) for binary heap
{mapping, "erlang.binary_memory.sbct", "vm_args.+MBsbct", [
    {commented, 512},
    {datatype, integer},
    merge
]}.

%% @doc The VM multi block carrier large size for process heap
{mapping, "erlang.eheap_memory.lmbcs", "vm_args.+MHlmbcs", [
    {commented, 5120},
    {datatype, integer},
    merge
]}.

%% @doc The VM multi block carrier large size for binary heap
{mapping, "erlang.binary_memory.lmbcs", "vm_args.+MBlmbcs", [
    {commented, 5120},
    {datatype, integer},
    merge
]}.

%% @doc The VM multi block carrier small size for process heap
{mapping, "erlang.eheap_memory.smbcs", "vm_args.+MHsmbcs", [
    {commented, 256},
    {datatype, integer},
    merge
]}.

%% @doc The VM multi block carrier small size for binary heap
{mapping, "erlang.binary_memory.smbcs", "vm_args.+MBsmbcs", [
    {commented, 256},
    {datatype, integer},
    merge
]}.

 %% @doc Set allocation strategy for binary multiblock carriers.  Default is
%% not predictable - do not rely on aoffcbf being the default.  For more info
%% see:
%% https://github.com/erlang/otp/blob/master/erts/emulator/internal_doc/CarrierMigration.md
{mapping, "erlang.binary_memory.as", "vm_args.+MBas", [
    {commented, "aoffcbf"},
    {datatype, {enum, [bf, aobf, aoff, aoffcbf, aoffcaobf, ageffcaoff, ageffcbf, ageffcaobf, gf]}},
    merge
]}.

%% @doc Set allocation strategy for process multiblock carriers.  Default is
%% not predictable - do not rely on aoffcbf being the default.  For more info
%% see:
%% https://github.com/erlang/otp/blob/master/erts/emulator/internal_doc/CarrierMigration.md
{mapping, "erlang.eheap_memory.as", "vm_args.+MHas", [
    {commented, "aoffcbf"},
    {datatype, {enum, [bf, aobf, aoff, aoffcbf, aoffcaobf, ageffcaoff, ageffcbf, ageffcaobf, gf]}},
    merge
]}.

%% @doc Set scheduler binding.  This is either unbound (default - u) or can be
%% set to whatever the default binding condition is, in the deployed release of
%% OTP (db).
%% For more info see: https://www.erlang.org/doc/man/erl.html#+sbt
%% Note that if non-Riak work is activated on the same node - e.g. as part
%% of batch operational jobs, or monitoring - allowing schedulers to be bound
%% can result in significant and unpredictable negative outcomes.  There may be
%% other ways of achieving similar performance improvements - e.g. by
%% right-sizing scheduler counts - that are lower risk than scheduler binding.
%% If a CPU topology cannot be determined, the binding will default to unbound
%% even when a binding is configured.  To confirm binding, use `remote_console`
%% and view:
%% `erlang:system_info(scheduler_bindings).`
{mapping, "erlang.schedulers_binding", "vm_args.+stbt", [
    {commented, "u"},
    {datatype, {enum, [u, db]}},
    merge
]}.

%% @doc Busy wait of schedulers
%% Sets scheduler busy wait threshold. Defaults to medium. The threshold
%% determines how long schedulers are to busy wait when running out of work
%% before going to sleep.
%% Significant improvements in efficiency may be gained by disabling busy
%% waiting
{mapping, "erlang.schedulers_busywait", "vm_args.+sbwt", [
    {commented, "none"},
    {datatype, {enum, [none, very_short, short, medium, long, very_long]}},
    merge
]}.

%% @doc Busy wait of dirty cpu schedulers
%% Sets scheduler busy wait threshold. Defaults to short. The threshold
%% determines how long schedulers are to busy wait when running out of work
%% before going to sleep.
%% Significant improvements in efficiency may be gained by disabling busy
%% waiting
{mapping, "erlang.schedulers_busywait_dirtycpu", "vm_args.+sbwtdcpu", [
    {commented, "none"},
    {datatype, {enum, [none, very_short, short, medium, long, very_long]}},
    merge
]}.

%% @doc Busy wait of dirty io schedulers
%% Sets scheduler busy wait threshold. Defaults to short. The threshold
%% determines how long schedulers are to busy wait when running out of work
%% before going to sleep.
%% Significant improvements in efficiency may be gained by disabling busy
%% waiting
{mapping, "erlang.schedulers_busywait_dirtyio", "vm_args.+sbwtdio", [
    {commented, "none"},
    {datatype, {enum, [none, very_short, short, medium, long, very_long]}},
    merge
]}.

%% @doc Set the Percentage of Schedulers to be online
%% For every vCPU in the system, what percentage should have a scheduler, and
%% what percentage of those schedulers should be online by default.
%% Do not set unless guided by perfomance tests for the specific setup and
%% workload.
{mapping, "erlang.schedulers_online_percentage", "vm_args.+SP",[
    {commented, "100:75"},
    {validators, ["scheduler_percentage"]},
    merge
]}.

%% @doc Set the Percentage of Dirty CPU Schedulers to be online
%% When using the leveled backend a relatievly low number of dirty schedulers
%% (e.g. 25%) are likely to be required due to the low proportion of NIFs in
%% use.
%% The percentages cannot exceed those of the schedulers_online_percentage
%% which will default to 100% of CPU.
%% Do not set unless guided by perfomance tests for the specific setup and
%% workload.
{mapping, "erlang.schedulers_dirtycpu_online_percentage", "vm_args.+SDPcpu",[
    {commented, "50:25"},
    {validators, ["scheduler_percentage"]},
    merge
]}.

%% @doc Set the absolute limit of Dirty IO Schedulers to be online
%% When using the leveled backend a relatievly high number of dirty schedulers
%% may be required relative to the CPU count, depending on the concurrent disk
%% throughput possible.
%% Unlike the scheduler percentages, this is set as an abolute number between
%% 1 and 1024 (default is 10).
%% Do not set unless guided by perfomance tests for the specific setup and
%% workload.
{mapping, "erlang.schedulers_dirtyio_online", "vm_args.+SDio",[
    {commented, 10},
    {datatype, integer},
    {validators, ["scheduler_absolute"]},
    merge
]}.

{validator,
 "scheduler_percentage",
 "must be A:B when B =< A and both A and B 1 < x =< 100",
 fun(PercPerc) ->
    case string:tokens(PercPerc, ":") of
        [A, B] ->
            AV = list_to_integer(A),
            BV = list_to_integer(B),
            AV =< 100 andalso AV > 0 andalso BV =< 100 andalso BV > 0;
        _ ->
            false
    end
 end}.

{validator,
 "scheduler_absolute",
 "must be 1 to 1024",
 fun(Value) ->
    is_integer(Value) andalso Value =< 1024 andalso Value >= 1
 end}.

{{#devrel}}
%% Because of the 'merge' keyword in the proplist below, the docs and datatype
%% are pulled from the leveldb schema.
{mapping, "leveldb.limited_developer_mem", "eleveldb.limited_developer_mem", [
  {default, on},
  {level, basic},
  merge
]}.

%% @doc erlang vm shutdown_time is useful when running a riak_test devrel
{mapping, "erlang.shutdown_time", "vm_args.-shutdown_time", [
  {default, "10s"},
  {datatype, {duration, ms}}
]}.
{{/devrel}}
