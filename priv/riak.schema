%%-*- mode: erlang -*-

%% @doc The severity level of the console log, default is 'info'.
{mapping, "logger.level", "kernel.logger_level", [
  {default, {{logger_level}} },
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency, none]}}
]}.

%% @doc Format string for the messages emitted to default log. The string is passed into
%% the handler as a logger_formatter template, the format is a list containing strings
%% and atoms. The atoms denote the keys for retrieving metadata from the logger events.
%% More information on default metadata can be found here (https://www.erlang.org/doc/man/logger_formatter.html#type-template).
{mapping, "logger.format", "kernel.logger", [
  {default, "[time,\" [\",level,\"] \",pid,\"@\",mfa,\":\",line,\" \",msg,\"\\n\"]."}
]}.

%% @doc Filename to use for log files.
{mapping, "logger.file", "kernel.logger", [
  {default, "$(platform_log_dir)/console.log"},
  {datatype, file}
]}.

%% @doc With log rotation enabled, this decides the maximum number of log 
%% files to store.
{mapping, "logger.max_files", "kernel.logger", [
  {default, 10},
  {datatype, integer}
]}.

%% @doc The maximum size of a single log file. Total size used for log files will 
%% be max_file_size * max_files.
{mapping, "logger.max_file_size", "kernel.logger", [
  {default, "1MB"},
  {datatype, bytesize}
]}.

%% @doc Determines if messages should emit to syslog.
{mapping, "syslogger.enabled", "kernel.logger", [
  {default, off},
  {datatype, {flag, on, off}}
]}.

%% @doc The severity level of the syslog log, default is 'notice'.
{mapping, "syslogger.level", "kernel.logger", [
  {default, notice},
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency, none]}}
]}.

%% @doc The syslog facility to use, default is 'user'.
{mapping, "syslogger.facility", "kernel.logger", [
  {default, user},
  {datatype, {enum, [user, local0]}}
]}.

%% @doc Format string for the messages emitted to syslog. The string is passed into
%% the handler as a logger_formatter template, the format is a list containing strings
%% and atoms. The atoms denote the keys for retrieving metadata from the logger events.
%% More information on default metadata can be found here (https://www.erlang.org/doc/man/logger_formatter.html#type-template).
{mapping, "syslogger.format", "kernel.logger", [
  {default, "[\"severity=\",level,\" text=\",msg]."},
  {datatype, string}
]}.

%% @doc Default opts that need setting for the syslogger application to ensure that
%% the PID is printed with log messages, along with the correct process identifier.
{translation, "syslogger",
    fun(_Conf) ->
        [{log_opts, [pid]}, {ident, "riak"}]
    end
}.

{translation,
 "kernel.logger",
 fun(Conf) ->
    LogFile = cuttlefish:conf_get("logger.file", Conf),
    MaxNumBytes = cuttlefish:conf_get("logger.max_file_size", Conf),
    MaxNumFiles = cuttlefish:conf_get("logger.max_files", Conf),

    DefaultFormatStr = cuttlefish:conf_get("logger.format", Conf),
    DefaultFormatTerm =
        case erl_scan:string(DefaultFormatStr) of
            {ok, DefaultTokens, _} ->
                case erl_parse:parse_term(DefaultTokens) of
                    {ok, DefaultTerm} ->
                        DefaultTerm;
                    {error, {_, _, DefaultError}} ->
                        cuttlefish:error(foo)
                end;
            {error, {_, _, DefaultScanError}} ->
                cuttlefish:error(foo)
        end,
    ConfigMap0 = #{config => #{file => LogFile,
                              max_no_bytes => MaxNumBytes,
                              max_no_files => MaxNumFiles},
                  formatter => {logger_formatter, 
                                    #{template => DefaultFormatTerm}
                               }
                 },

    DefaultLog = [{handler, default, logger_std_h, ConfigMap0}],

    SyslogLog =
        case cuttlefish:conf_get("syslogger.enabled", Conf) of
            true ->
                SyslogLevel = cuttlefish:conf_get("syslogger.level", Conf),
                SyslogFacility = cuttlefish:conf_get("syslogger.facility", Conf),
                SyslogFormatStr = cuttlefish:conf_get("syslogger.format", Conf),
                SyslogFormatTerm =
                    case erl_scan:string(SyslogFormatStr) of
                        {ok, SyslogTokens, _} ->
                            case erl_parse:parse_term(SyslogTokens) of
                                {ok, SyslogTerm} ->
                                    SyslogTerm;
                                {error, {_, _, SyslogError}} ->
                                    cuttlefish:error(foo)
                            end;
                        {error, {_, _, SyslogScanError}} ->
                            cuttlefish:error(foo)
                    end,
                ConfigMap1 = #{level => SyslogLevel,
                               formatter => {logger_formatter, 
                                                #{template => SyslogFormatTerm,
                                                  single_line => true}}, facility => SyslogFacility},
                [{handler, syslog, syslogger, ConfigMap1}];
            false ->
                []
        end,
    DefaultLog ++ SyslogLog
  end
}.

%% @doc Cookie for distributed node communication.  All nodes in the
%% same cluster should use the same cookie or they will not be able to
%% communicate.
{mapping, "distributed_cookie", "vm_args.-setcookie", [
  {default, "riak"}
]}.


%% override zdbbl from 1mb to 32mb
{mapping, "erlang.distribution_buffer_size", "vm_args.+zdbbl", [
  {default, "32MB"},
  merge
]}.

%% VM scheduler collapse, part 1 of 2
{mapping, "erlang.schedulers.force_wakeup_interval", "vm_args.+sfwi", [
  {default, 500},
  {datatype, integer},
  merge
]}.

%% VM scheduler collapse, part 2 of 2
{mapping, "erlang.schedulers.compaction_of_load", "vm_args.+scl", [
  {default, "false"},
  merge
]}.

%% VM emulator ignore break signal (prevent ^C / ^Gq)
{mapping, "erlang.vm.ignore_break_signal", "vm_args.+Bi", [
  {default, "true"},
  merge
]}.

{{#devrel}}
%% Because of the 'merge' keyword in the proplist below, the docs and datatype
%% are pulled from the leveldb schema.
{mapping, "leveldb.limited_developer_mem", "eleveldb.limited_developer_mem", [
  {default, on},
  {level, basic},
  merge
]}.

%% @doc erlang vm shutdown_time is useful when running a riak_test devrel
{mapping, "erlang.shutdown_time", "vm_args.-shutdown_time", [
  {default, "10s"},
  {datatype, {duration, ms}}
]}.
{{/devrel}}
